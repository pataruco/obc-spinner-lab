* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  --svg-radius: 24;
  /* Set the value of dasharray to be the length of the circumference */
  /* 2 * Ï€ * Radius  = C */
  --stroke-dasharray: calc((2 * var(--svg-radius)) * 3.14 );
  /* Remove a percentage value from circumference */
  /* C * (1 - 0.75) =  circle - 25% */
  --stroke-dashoffset: calc(var(--stroke-dasharray) * (1 - 0.75));
}

svg {
  display: block;
  width: 100%;
  height: auto;
}

/* SVG Spinner */

.svgSpinnerWrapper {
  width: 200px;
}

.svgSpinner {
  fill: none;
  stroke: red;
  stroke-width: 3;
}

.circleWrapper {
  transform-origin: center;
}

.svgSpinnerCircle {
  stroke-dasharray: var(--stroke-dasharray);
  stroke-dashoffset: var(--stroke-dashoffset);
  transition: all 1s ease-in;
}

.rotate {
  animation: svgRotate 2s infinite linear;
}

.button {
  display: block;
  margin-top: 50px;
  color: black;
}

.svgSpinner.success .svgSpinnerCircle {
  stroke: green;
  stroke-dashoffset: 0;
}

/* SVG Spinner with checkmark*/
/* All together */

.svgCheckmarkSpinnerWrapper {
  width: 200px;
}

.svgCheckmarkSpinnerSvg {
  fill: none;
  stroke: red;
  stroke-width: 3;
}

.svgCheckmarkSpinnerCircle {
  stroke: red;
  stroke-dasharray: var(--stroke-dasharray);
  stroke-dashoffset: var(--stroke-dashoffset);
  transition: all 1s ease-in;
}

.svgCheckmarkSpinnerPath {
  stroke: transparent;
  stroke-dasharray: 48;
  stroke-dashoffset: 48;
  transition: all 1s ease-in 1s;
}

.svgCheckmarkSpinnerSvg.success .svgCheckmarkSpinnerCircle,
.svgCheckmarkSpinnerSvg.success .svgCheckmarkSpinnerPath {
  stroke: green;
  stroke-dashoffset: 0;
}


@keyframes svgRotate {
  to {
    transform: rotate(360deg);
  }
}
